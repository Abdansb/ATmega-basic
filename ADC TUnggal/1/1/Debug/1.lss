
1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a6  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000074  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cd  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000158  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_INIT>:
#define F_CPU 16000000L
#include <avr/io.h>

void ADC_INIT()
{
	ADCSRA |= (1 << 7); // ADC enable ADEN bit 7
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 <<2)|(1 << 1)|(1 << 0); // ADPS prescaler select bits
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	87 60       	ori	r24, 0x07	; 7
  72:	86 b9       	out	0x06, r24	; 6
	ADCSRA &=~ (1 << 5); //Aktifkan auto trigger
  74:	35 98       	cbi	0x06, 5	; 6
	SFIOR &= ~(1 << 7) &~ (1 << 6) &~ (1 << 5); // mode free running, bit 765 isinya 0
  76:	80 b7       	in	r24, 0x30	; 48
  78:	8f 71       	andi	r24, 0x1F	; 31
  7a:	80 bf       	out	0x30, r24	; 48
	
	ADMUX |= (1 << 7)|(1 << 6); // set refernsi internal 2.56 V
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 6c       	ori	r24, 0xC0	; 192
  80:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << 0); // Analaog channel & gain selection bit channel 1
  82:	38 9a       	sbi	0x07, 0	; 7
	ADMUX &= ~(1 << 5); // Right adjusted presentation adc result
  84:	3d 98       	cbi	0x07, 5	; 7
  86:	08 95       	ret

00000088 <main>:
}


int main(void)
{
	ADC_INIT();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_INIT>
	DDRD = 0xff;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff;
  90:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x00;
  92:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  94:	88 bb       	out	0x18, r24	; 24

	while (1)
	{
		if (~PINB&(1<<0)) ADCSRA|=(1<<6); // 
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	36 9a       	sbi	0x06, 6	; 6
		if(ADCSRA&(1<<4))
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0xe>
		{
			PORTD = ADCL;
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	82 bb       	out	0x12, r24	; 18
			PORTC = ADCH;
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	85 bb       	out	0x15, r24	; 21
			ADCSRA |= (1 << 4);
  a6:	34 9a       	sbi	0x06, 4	; 6
  a8:	f6 cf       	rjmp	.-20     	; 0x96 <main+0xe>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
